par(mfrow=c(1,3))
max.y <- length(v.occupancy)/1.5
hist(v.occupancy, ylim=c(0, max.y), main="ALL", xlab="", col=cols[2])
hist(v.occupancyAML, ylim=c(0, max.y), main="AML", xlab="", col=cols[2])
hist(v.occupancyNBM, ylim=c(0, max.y), main="NBM", xlab="", col=cols[2])
# Chunk 8: DMP-DB-input
rm(list=ls())
data(TSS.human.GRCh38)
cols <- brewer.pal(3,"Set3")
## Input files
file.beta <- "../../DATA/processed/RData/EpicArray-beta-norm-annotated.RData"
file.DMP <- "../../DATA/processed/RData/EpicArray-DMP-AML-vs-NBM.txt"
file.db <- "../../DATA/processed/RData/diffBind.RData"
## EPIC beta and DMPs
#data.beta <- read.delim(file.beta)
#save(data.beta, file="../../DATA/processed/RData/EpicArray-beta-norm-annotated.RData")
load(file.beta)
data.DMP <- read.delim(file.DMP)
## ChIP-seq data
# DB data
load(file.db)
# Affinity data
m.binding <- pctcf$binding
# DB: AML vs. NBM
#dba.show(pctcf, bContrasts=TRUE)
data.db <- dba.report(pctcf, contrast=1)
data.dbAnno=annotatePeakInBatch(data.db, AnnotationData=TSS.human.GRCh38, output="upstream&inside", maxgap=5000, PeakLocForDistance)
data.dbAnno <- addGeneIDs(annotatedPeak=data.dbAnno, orgAnn="org.Hs.eg.db", feature_id_type="ensembl_gene_id", IDs2Add=c("symbol", "entrez_id"))
df.DB <- mcols(data.dbAnno)
# Chunk 9: DMP-DB-overview-table
# Number of DMPs and DBs
no.dmp <- nrow(data.DMP)
no.db <- nrow(mcols(data.db))
# Number of correspodning gene symbols
genes.dmp <- as.character(unique(data.DMP$gene))
genes.dmp <- genes.dmp[-which(genes.dmp=="")]
genes.db <- as.character(unique(df.DB$symbol))
genes.db <- na.omit(genes.db)
no.genesDMP <- length(genes.dmp)
no.genesDB <- length(genes.db)
# Number of up and down in AML (DMPs and DBs)
#idx.up <- which(data.db$Fold>0)
no.db_up <- sum(data.db$Fold>0)
no.db_down <- sum(data.db$Fold<0)
no.dmp_up <- sum(data.DMP$logFC<0) # signs are reversed
no.dmp_down <- sum(data.DMP$logFC>0) # signs are reverse
epic.out <- c(no.dmp, no.dmp_down, no.dmp_up, no.genesDMP)
chip.out <- c(no.db, no.db_down, no.db_up, no.genesDB)
table.out <- rbind(epic.out, chip.out)
rownames(table.out) <- c("EPIC", "ChIP-seq")
colnames(table.out) <- c("DMP/DB", "Down", "Up", "Gene symbols")
print(xtable(table.out,
caption = "Summary of the DMP and DB results, incl. number of corresponding unique gene symbols ", align = c("r", "r", "r", "r", "r"), label="tab:DMP-DB-overview"),
caption.placement = "bottom",
size="footnotesize",
include.rownames=TRUE,
floating=TRUE,
table.placement="H", type = "latex",
format.args=list(big.mark = " "))
#test.cg <- "cg17302948"
#idx <- which(rownames(data.beta)==test.cg)
#data.beta[idx,]
# Chunk 10: DMP-DB-Venn-genes
area1 <- length(genes.dmp)
area2 <- length(genes.db)
cross.area <- length(intersect(genes.dmp, genes.db))
venn.plot <- draw.pairwise.venn(area1, area2, cross.area, category = c("DMP", "DB"), scaled=TRUE, fill=cols[1:2])
grid.draw(venn.plot);
# Chunk 11: Fig-DMP-DB-Venn-genes-up-down
genes.all <- unique(c(genes.dmp, genes.db))
# DMP specfic
genes.DMPspecific <- setdiff(genes.dmp, intersect(genes.dmp, genes.db))
probes.DMPspecfic <- which(data.DMP$gene %in% genes.DMPspecific)
per.dmp_up <- round(sum(data.DMP$logFC[probes.DMPspecfic]<0)*100/length(probes.DMPspecfic),2) # signs are reversed
per.dmp_down <- round(sum(data.DMP$logFC[probes.DMPspecfic]>0)*100/length(probes.DMPspecfic),2) # signs are reverse
# DB specfic
genes.DBspecific <- setdiff(genes.db, intersect(genes.dmp, genes.db))
regions.DBspecfic <- which(df.DB$symbol %in% genes.DBspecific)
per.db_up <- round(sum(df.DB$Fold[regions.DBspecfic]>0)*100/length(regions.DBspecfic),2)
per.db_down <- round(sum(df.DB$Fold[regions.DBspecfic]<0)*100/length(regions.DBspecfic),2)
par(mfrow=c(1,2))
barplot(c(per.dmp_down, per.dmp_up), col=cols[1], names=c("Down", "Up"))
barplot(c(per.db_down, per.db_up), col=cols[2], names=c("Down", "Up"))
# Chunk 12: Fig-DMP-DB-Venn-intersect
genes.overlap <- intersect(genes.dmp, genes.db)
avg.dmp <- c()
avg.db <- c()
# data.DMP
# df.DB
for (i in 1:length(genes.overlap))
{
idx.dmp <- which(data.DMP$gene==genes.overlap[i])
idx.db <- which(df.DB$symbol==genes.overlap[i])
avg.dmp[i] <- mean(data.DMP$logFC[idx.dmp])*(-1)
avg.db[i] <- mean(df.DB$Fold[idx.db])
}
df.avg <- data.frame(avgDMP=avg.dmp, avgDB=avg.db)
# Number of upp
no.down_down <- length(which(avg.dmp<0 & avg.db<0))
no.up_up <- length(which(avg.dmp>0 & avg.db>0))
no.down_up <- length(which(avg.dmp<0 & avg.db>0))
no.up_down <- length(which(avg.dmp>0 & avg.db<0))
cols <- brewer.pal(8,"Set3")
slices <- c(no.down_down, no.up_up, no.down_up, no.up_down)
lbls <- c("Down-Down", "Up-Up", "Down-Up", "Up-Down")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls,  main="", col=cols[1:4], cex=0.8, cex.main=0.8)
# Chunk 13: Data
# dir.files <- "~/Documents/NBIS/!PROJECTS/3696_CTCF/Git//Files/"
# inp.meta <- "~/Documents/NBIS/!PROJECTS/3696_CTCF/Git//Files/Sample_info_20170515.txt"
#
# library(xtable)
# m.meta <- read.delim(inp.meta)
# m.meta[,2] <- gsub("_R1_001.fastq.gz", "", m.meta[,2])
#  print(xtable(m.meta[,c(-1, -9)], caption = "Libraries uploaded to Uppnex project b2017080", align = c("l", "l", "c", "c", "c", "c", "c", "c"), label="tab:metadata"),       caption.placement = "bottom",
#   size="tiny",
#  include.rownames=FALSE,
#  rotate.colnames=FALSE,
#  floating=TRUE,
#  table.placement="H")
?eps
?pdf
?svg
105 + 8
200 - 113
87 - 16
224 - 116
224-166
library(scater)
update.packages()
library(scater)
?version()
version()
R.Version()
R.Version
R.Version()
library(ggplot2)
installed.packages()
install.packages("knitr")
system('defaults write org.R-project.R force.LANG en_US.UTF-8')
4*8
32-23
172/2
378679800/14208449
?rm()
library(DiffBind)
?dba.count
?estimateDispersions
?nbinomWaldTest.
?nbinomWaldTest
?dba.count
?clusterProfiler
library(clusterProfiler)
?annotatePeakInBatch
library(ChIPpeakAnno)
?annotatePeakInBatch
library(ChIPseeker)
?annotatedPeak
?annotatePeak
?enrichGO
?seq2gene
?seq2gene
library(DiffBind)
sessionInfo()
plot(int.mciaIQR,  phenovec=int.metaSub$Condition)
rm(list=ls())
library(GenomicRanges)
library(ChIPseeker)
library(xtable)
library(edgeR)
library(ggplot2)
library(scater)
library(omicade4)
40500
40500-39600
900*100/40500
lirary(lme4)
library(lme4)
install.packages("DAAG")
knitr::opts_chunk$set(echo = TRUE)
library("DAAG")
library("lattice")
Brainwt
head(jobs,3)
?all
t1=TRUE
t2=TRUE
t3=FALSE
all(t1, t2)
all(t1, t2, t3)
?args
args(t)
args(apply(array, margin, ...))
demo(graphics)
plot(Brainwt ~ Bodywt, data=primates)
primates
with(primates, plot(Bodywt, Brainwt))
xyplot(Brainwt ~ Bodywt, data=primates)
graphics.off()
xyplot(Brainwt ~ Bodywt, data=primates)
roller.lm <- lm(depression ~ weight, data=roller)
summary(roller.lm)
?aov
roller.aov <- aov(depression ~ weigth, data=roller)
roller.aov <- aov(depression ~ weight, data=roller)
summary(roller.aov)
?polr
roller.aov <- aov(depression ~ weight, data=roller)
summary(roller.aov)
roller.aov <- aov(depression ~ 1 + Error(weight), data=roller)
summary(roller.aov)
ant111b.aov <- aov(harvwt ~ 1 + Error(site))
ant111b.aov <- aov(harvavwt ~ 1 + Error(site), data=ant111b)
ant111b.aov <- aov(harvvwt ~ 1 + Error(site), data=ant111b)
ant111b.aov <- aov(harvwt ~ 1 + Error(site), data=ant111b)
ant11b.aov
ant111b.aov
summar(ant111b.aov)
summary(ant111b.aov)
ant111b.lmer <- lmer(harvtw ~ 1 + (1 | site), data=ant111b)
ant111b.lmer <- lmer(harvwt ~ 1 + (1 | site), data=ant111b)
summary(ant111b.lmer)
summary(ant111b.aov)
summary(ant111b.lmer)
ant111b.aov
summary(harvwt ~ site, data=ant111b)
summary(aov(harvwt ~ site, data=ant111b))
ant111b.lmer <- lmer(harvwt ~ 1 + (1 | site), data=ant111b)
summary(ant111b.lmer)
ant111b.lmer
head(ant111b)
tail(ant111b)
?aov
ant111b.aov <- aov(harvwt ~ parcel + Error(site), data=ant111b)
summary(ant111b.aov)
ant111b.aov <- aov(harvwt ~ 1 + Error(site), data=ant111b)
summary(ant111b.aov)
ant111b.aov <- aov(harvwt ~ parcl + Error(site), data=ant111b)
ant111b.aov <- aov(harvwt ~ parcel + Error(site), data=ant111b)
summary(ant111b.aov)
ant111b.aov <- aov(harvwt ~ 1 + Error(site), data=ant111b)
summary(ant111b.aov)
ant111b.lmer <- lmer(harvwt ~ 1 + (1 | site), data=ant111b)
ant111b.lmer
?polr
?wilcox
?wilcox.test
?kruskal.test
install.packages("usethis")
if (!requireNamespace("devtools")) install.packages("devtools")
devtools::install_github("olgadet/NBISrmd")
devtools::install_github("olgadet/NBISrmd")
library(xtable)
my.table <- matrix(data=NA, nrow=25, ncol=3)
my.table <- matrix(data=NA, nrow=25, ncol=4)
colnames(my.table) <- c("Name", "Unit", "Pizza preferences", "Comments")
library(xtable)
my.table <- matrix(data=NA, nrow=25, ncol=4)
colnames(my.table) <- c("Name", "Unit", "Pizza preferences", "Comments")
print(xtable(my.table))
print(xtable(my.table), xtable.comment=F)
print(xtable(my.table, align=c("|L{4cm}", "|L{4cm}", "|L{4cm}", "|L{4cm}"))
library(xtable)
c("r", rep("|L{4cm}", 5
)
)
library(xtable)
options(xtable.comment = FALSE)
my.table <- matrix(data=NA, nrow=36, ncol=4)
colnames(my.table) <- c("Name", "Unit", "Pizza preferences", "Comments")
print(xtable(my.table, align=c("r"       "|L{4cm}" "|L{4cm}" "|L{4cm}" "|L{4cm}" "|L{4cm})))
print(xtable(my.table, align=c("r""|L{4cm}" "|L{4cm}" "|L{4cm}" "|L{4cm}" "|L{4cm}")))
library(xtable)
options(xtable.comment = FALSE)
my.table <- matrix(data=NA, nrow=36, ncol=4)
colnames(my.table) <- c("Name", "Unit", "Pizza preferences", "Comments")
print(xtable(my.table, align=c("r""|L{4cm}" "|L{4cm}" "|L{4cm}" "|L{4cm}" "|L{4cm}")))
library(xtable)
options(xtable.comment = FALSE)
my.table <- matrix(data=NA, nrow=36, ncol=4)
colnames(my.table) <- c("Name", "Unit", "Pizza preferences", "Comments")
print(xtable(my.table, align=c("r" "|L{4cm}" "|L{4cm}" "|L{4cm}" "|L{4cm}" "|L{4cm}")))
library(xtable)
options(xtable.comment = FALSE)
my.table <- matrix(data=NA, nrow=36, ncol=4)
colnames(my.table) <- c("Name", "Unit", "Pizza preferences", "Comments")
print(xtable(my.table, align=c("r" "|L{4cm}" "|L{4cm}" "|L{4cm}" "|L{4cm}" "|L{4cm}")))
library(xtable)
options(xtable.comment = FALSE)
my.table <- matrix(data=NA, nrow=36, ncol=4)
colnames(my.table) <- c("Name", "Unit", "Pizza preferences", "Comments")
print(xtable(my.table, align=c("r", rep("|L{4cm}", 5))
print(xtable(my.table, align=c("r", rep("|L{4cm}", 5)))
library(xtable)
my.table <- matrix(data=NA, nrow=36, ncol=6)
colnames(my.table) <- c("Name", "", "Unit", "", "Pizza preferences", "Comments")
my.table <- matrix(data=NA, nrow=36, ncol=6)
library(xtable)
options(xtable.comment = FALSE)
my.table <- matrix(data=NA, nrow=36, ncol=6)
colnames(my.table) <- c("Name", "", "Unit", "", "Pizza preferences", "Comments")
print(xtable(my.table))
"print(xtable(my.table, align=c("r", rep("|L{4cm}", ncol(my.table)))))
library(xtable)
options(xtable.comment = FALSE)
my.table <- matrix(data=NA, nrow=36, ncol=6)
colnames(my.table) <- c("Name", "", "Unit", "", "Pizza preferences", "Comments")
print(xtable(my.table))
"print(xtable(my.table, align=c("r", rep("|L{4cm}", ncol(my.table)))))
colnames(my.table) <- c("Name", "Unit", "Pizza preferences", "Comments")
my.table <- matrix(data=NA, nrow=36, ncol=4)
colnames(my.table) <- c("Name", "Unit", "Pizza preferences", "Comments")
library(xtable)
options(xtable.comment = FALSE)
my.table <- matrix(data=NA, nrow=36, ncol=4)
colnames(my.table) <- c("Name", "Unit", "Pizza preferences", "Comments")
print(xtable(my.table))
print(xtable(my.table, align=c("r", rep("|L{4cm}", ncol(my.table)))))
library(xtable)
options(xtable.comment = FALSE)
my.table <- matrix(data=NA, nrow=36, ncol=4)
colnames(my.table) <- c("Name", "Unit", "Pizza preferences", "Comments")
print(xtable(my.table))
print(xtable(my.table, align=c("r", rep("|L{3cm}", ncol(my.table)))))
print(xtable(my.table,  width = 100))
library(xtable)
options(xtable.comment = FALSE)
my.table <- matrix(data=NA, nrow=36, ncol=4)
colnames(my.table) <- c("Name", "Unit", "Pizza preferences", "Comments")
print(xtable(my.table,  width = 100))
#print(xtable(my.table, align=c("r", rep("|L{3cm}", ncol(my.table)))))
kable(my.table)
library(kable)
install.packages("kableExtra")
?kable
data.frame(RRmin=1, RRmax=10) %>%
dplyr::rename(`Reportable Range Min` = RRmin, `Reportable Range Max` = RRmax) %>%
kable() %>%
column_spec(1, width = "0.5in") %>%
kable_styling(c("bordered", "condensed"), full_width = F)
library(ChAMP)
?champ.DMP
library(ChIPseeker)
?shuffle
setwd("~/Desktop/excelerate-scRNAseq/session-de")
setwd("~/Desktop/workshop-biostatistics/session-example")
setwd("~/Desktop/workshop-biostatistics/session-regression-I")
setwd("~/Desktop/workshop-biostatistics/session-regression-I")
setwd("~/Desktop/excelerate-scRNAseq/session-de")
library(Seurat)
?Seurat()
package.version("Seurat")
sessionInfo()
install.packages('Seurat')
install.packages("Seurat")
library(Seurat)
sessionInfo()
?FindMarkers
setwd("~/Desktop/excelerate-scRNAseq/session-de")
library(goseq)
?goseq
?nullp
?goseq
library(clusterProfiler)
?dotplot
set.seed(1)
par(mfrow=c(1,3))
hist(rnbinom(1000, mu=4, size=1), col=rgb(0.1,0.1,0.1,0.5), xlab="Read Counts", main="Negative Binomial")
hist(rnbinom(1000, mu = 4, size = 10), col=rgb(0.8,0.8,0.8,0.5), xlab="Read Counts", main="Negative Binomial")
hist(rnbinom(1000, mu = 4, size = 100), col=rgb(0.8,0.8,0.8,0.5), xlab="Read Counts", main="Negative Binomial")
plot(1:10)
?rnbinom
hist(rnbinom(1000, mu=4, size=1))
hist(rnbinom(1000, mu=4, size=1), col="grey", xlab="Read Counts", main="mu=4, size=1")
a <- 0.1
b <- 0.1
g <- 100
lambdas <- rbeta(1000, a, b)
counts <- sapply(g*lambdas, function(l) {rpois(1, lambda = l)})
hist(
counts,
col = "grey50",
xlab = "Read Counts",
main = "Poisson-Beta"
a <- 0.4
b <- 0.2
g <- 100
lambdas <- rbeta(1000, a, b)
counts <- sapply(g*lambdas, function(l) {rpois(1, lambda = l)})
hist(
counts,
col = "grey50",
xlab = "Read Counts",
main = "Poisson-Beta"
)
set.seed(1)
par(mfrow=c(1,2))
a <- 0.1
b <- 0.1
g <- 100
lambdas <- rbeta(1000, a, b)
counts <- sapply(g*lambdas, function(l) {rpois(1, lambda = l)})
hist(
counts,
col = "grey50",
xlab = "Read Counts",
main = "Poisson-Beta"
)
a <- 0.4
b <- 0.2
g <- 100
lambdas <- rbeta(1000, a, b)
counts <- sapply(g*lambdas, function(l) {rpois(1, lambda = l)})
hist(
counts,
col = "grey50",
xlab = "Read Counts",
main = "Poisson-Beta"
)
setwd("~/Desktop/excelerate-scRNAseq/session-de")
install.packages("ggplot2")
library(ggplot2)
library(knitr)
?purl
getwd()
getwed()
getwd()
dir()
dir()
sessionInfo()
?glmnet
install.packages(glmnet)
install.packages("glmnet")
?kableExtra
install.packages("kableExtra")
install.packages("glmnet")
sessionInfo()
library(knitr)
install.packages("knitr")
install.packages("tidyverse")
install.packages("keras")
1700*.1
1700/239
239*100/1700
170-54
170-54
116/2
170*2-54
286/2
286/2 - 80
setwd("~/Desktop/stats")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(reshape2)
library(tidyverse)
library(kableExtra)
library(UsingR)
library(googledrive)
library(googlesheets4)
## Read google sheet
httr::set_config(httr::config(http_version = 0))
drive_deauth()
sheets_deauth()
dice <- read_sheet(as_id("https://docs.google.com/spreadsheets/d/1t3jOucU48MVoCQGTbGyWe9SntFbHlHqGSCiqMptHhhs/edit?usp=sharing"), col_types="i")
#### If you don't have googlesheets4 installed, save the the google sheet
#### to a csv file and read it as follows;
## dice <- read.csv("Dice experiment - Blad1.csv")
#### For plotting the histrogram
## data <- melt(dice) %>% filter(value %in% 0:10)
## ggplot(data, aes(x=value, fill=variable)) + geom_histogram(binwidth=1, center=0, color="white") + theme_bw() + theme(legend.position=c(1,1), legend.justification=c(1,1))
x <- unlist(dice)
x <- x[x %in% 0:10]
setwd("~/Desktop/stats")
library(googledrive)
library(googlesheets4)
## Read google sheet
httr::set_config(httr::config(http_version = 0))
drive_deauth()
sheets_deauth()
dice <- read_sheet(as_id("https://docs.google.com/spreadsheets/d/1t3jOucU48MVoCQGTbGyWe9SntFbHlHqGSCiqMptHhhs/edit?usp=sharing"), col_types="i")
x <- unlist(dice)
x <- x[x %in% 0:10]
x
x <- unlist(dice)
x <- x[x %in% 0:10]
x
x <- unlist(dice)
x <- x[x %in% 0:10]
sum(x==6)/length(x)
setwd("~/Desktop/workshop-biostatistics/session-regression-II-extra")
setwd("~/Desktop/workshop-biostatistics/session-regression-II-extra")
rm(list=ls())
library(xtable)
data.brain <- read.delim("DATA/index.txt")
head(data.brain)
head(data.brain)
reg.fit <- lm(PIQ ~ Brain + Height + Weight)
reg.fit <- lm(PIQ ~ Brain + Height + Weight, dataset=data.brain)
class(data.brain)
head(data.brain)
reg.fit <- lm(PIQ ~ Brain + Height + Weight, dataset=data.brain)
reg.fit <- lm(PIQ ~ Brain + Height + Weight, data=data.brain)
summary(reg.fit)
head(data.brain)
tail(data.brain)
data.smoke <- read.delim("DATA/birthsmokers.txt")
head(data.smoke)
class(data.smoke)
reg.fit <- lm(Wgt~Gest + Smoke, data=data.smoke)
summary(reg.fit)
